@page "/"
@page "/StkMS"
@using Blazored.LocalStorage
@using StkMS.Contracts
@using StkMS.ViewModels
@using BlazorBarcodeScanner.ZXing.JS
@using StkMS.Library.Contracts
@using StkMS.Library.Models
@using System.Threading

@inject IJSRuntime jsRuntime

@inject ILocalStorageService localStorage
@inject IMapper mapper
@inject IStock stock
@inject IInventory inventory
@inject IReportGenerator reportGenerator

<h1>Hello!</h1>

<p>Inventory status: @(inventory.State == InventoryState.None ? "Not " : "") Running.</p>
@if (inventory.StartedAt.HasValue)
{
    <p>Inventory started at @inventory.StartedAt.Value.ToString("G")</p>
}
@if (inventory.CompletedAt.HasValue)
{
    <p>Inventory completed at @inventory.CompletedAt.Value.ToString("G")</p>
}

<!-- V2 -->

<button class="btn btn-primary" disabled="@(inventory.State != InventoryState.None)" @onclick="BeginInventory">Begin the inventory</button>
<button class="btn btn-primary" disabled="@(inventory.State == InventoryState.None)" @onclick="CompleteInventory">Complete the inventory</button>

<hr />
<div class="row">
    <div class="col-xs-12 col-sm-8 col-lg-4 col-xl-2">
        <EditForm Model="@stockViewModel" OnValidSubmit="@AddOrUpdateProduct">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="productCode">Product Code</label>
                <span id="productCode">@stockViewModel.Code</span>
            </div>

            <div class="form-group">
                <label for="productName">Product Name</label>
                <InputText id="productName" @bind-Value="stockViewModel.Name" class="form-control" />
            </div>

            <div class="form-group">
                <label for="productUnit">Unit</label>
                <InputText id="productUnit" @bind-Value="stockViewModel.Unit" class="form-control" />
            </div>

            <div class="form-group">
                <label for="productUnitPrice">Unit Price</label>
                <InputNumber id="productUnitPrice" @bind-Value="stockViewModel.UnitPrice" class="form-control" />
            </div>

            <div class="form-group">
                <label for="productQuantity">Quantity</label>
                <InputNumber id="productQuantity" @bind-Value="stockViewModel.Quantity" class="form-control" />
            </div>

            <div class="text-right">
                <button type="submit" class="btn btn-primary">Add/Update</button>
            </div>
        </EditForm>
    </div>
</div>

<hr />
<BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title=""
                                             StartCameraAutomatically="true"
                                             ShowStart="false"
                                             ShowReset="false"
                                             ShowVideoDeviceList="false"
                                             VideoWidth="300"
                                             VideoHeigth="200" />

<hr />
<div>
    <button class="btn btn-success" type="button" @onclick="async () => await GenerateReportAsync().ConfigureAwait(true)">Generate Report</button>
</div>

@code
{
    private StockViewModel stockViewModel = new();

    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);

        timer = new Timer(timer_Tick, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));

        JsInteropClass.BarcodeReceived += LocalReceivedBarcodeTextAsync;

        await ProductScannedAsync("123500234976823456").ConfigureAwait(true);
    }

    private async void timer_Tick(object? state)
    {
        await RefreshStockAsync().ConfigureAwait(false);
    }

    private async void LocalReceivedBarcodeTextAsync(BarcodeReceivedEventArgs args)
    {
        await ProductScannedAsync(args.BarcodeText).ConfigureAwait(true);
        StateHasChanged();
    }

    private void BeginInventory()
    {
        inventory.Begin();
    }

    private void CompleteInventory()
    {
        inventory.Complete();
    }

    private async Task ProductScannedAsync(string productCode)
    {
        var product = await stock.FindProductAsync(productCode).ConfigureAwait(true);
        stockViewModel = product == null ? new StockViewModel { Code = productCode } : mapper.MapToViewModel(product);
    }

    private void AddOrUpdateProduct()
    {
        var product = mapper.MapToDomain(stockViewModel!);
        stock.AddOrUpdateAsync(product);
    }

    private async ValueTask GenerateReportAsync()
    {
        var bytes = reportGenerator.Generate(await stock.GetAllAsync().ConfigureAwait(true));
        await jsRuntime.InvokeVoidAsync("BlazorDownloadFile", "report.pdf", "application/octet-stream", bytes).ConfigureAwait(true);
    }

    private async ValueTask RefreshStockAsync()
    {
        await stock.GetAllAsync().ConfigureAwait(true);
    }
}