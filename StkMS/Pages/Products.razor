@page "/products"

@using StkMS.Contracts
@using StkMS.Library.Contracts
@using Blazored.LocalStorage
@using StkMS.Library.Models
@using System.IO
@using OfficeOpenXml.Style
@using StkMS.Services
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel

@inject ILocalStorageService localStorage
@inject IMapper mapper
@inject IStock stock
@inject IInventory inventory
@inject IJSRuntime JS

<h1>List with all products</h1>
<RadzenButton Text="Excel" Icon="grid_on" Click="@GenerateExcel" Style="margin-bottom:20px" />

<RadzenDataGrid AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="5"
                IsLoading="@isLoading" Count="@count" Data="@stockView" LoadData="@LoadData"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                TItem="ProductStock"
                ColumnWidth="200px" AllowColumnResize="true">
    <Columns>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Code" Filterable="false" Title="ID" Frozen="true" Width="100px" TextAlign="Radzen.TextAlign.Center" />
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Name" Title="PRoduct Name" />
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Unit" Title="Unit" Width="50px" />
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.UnitPrice" Title="Unit Price" />
        <RadzenDataGridColumn TItem="ProductStock" Property="Quantity" Title="Quantity" Width="100px" />

    </Columns>
</RadzenDataGrid>

@code {
    bool isLoading;
    int count;

    IEnumerable<ProductStock>? stockView;

    public async Task GenerateExcel()
    {
        var stocks = await stock.GetAllAsync();
        IWorkbook workbook = new XSSFWorkbook();

        var dataFormat = workbook.CreateDataFormat();
        var dataStyle = workbook.CreateCellStyle();

        ISheet worksheet = workbook.CreateSheet("Sheet1");

        int rowNumber = 0;
        IRow row = worksheet.CreateRow(rowNumber++);

        ICell cell = row.CreateCell(0);
        cell.SetCellValue("Code");

        cell = row.CreateCell(1);
        cell.SetCellValue("Name");

        cell = row.CreateCell(2);
        cell.SetCellValue("Unit");

        cell = row.CreateCell(3);
        cell.SetCellValue("Unit Price");

        cell = row.CreateCell(4);
        cell.SetCellValue("Quantity");

        foreach (var pStock in stocks)
        {
            row = worksheet.CreateRow(rowNumber++);

            cell = row.CreateCell(0);
            cell.SetCellValue(pStock.ProductCode);

            cell = row.CreateCell(1);
            cell.SetCellValue(pStock.Product.Name);

            cell = row.CreateCell(2);
            cell.SetCellValue(pStock.Product.Unit);

            cell = row.CreateCell(3);
            cell.SetCellValue(pStock.Product.UnitPrice.ToString());

            cell = row.CreateCell(4);
            cell.SetCellValue(pStock.Quantity.ToString());
        }

        MemoryStream stream = new MemoryStream();
        workbook.Write(stream);
        byte[] bytes = stream.ToArray();
        stream.Close();

        await JS.SaveAs("Excel-Products.xlsx", bytes);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var data = await stock.GetAllAsync();
        stockView = data;
        count = data.ToArray().Length;
        isLoading = false;
    }
}

