@page "/products"
@using StkMS.Library.Services
@using Blazored.LocalStorage
@using StkMS.Contracts
@using StkMS.Library.Contracts
@using StkMS.Library.Models
@using System.Text
@using System.IO

@inject ILocalStorageService localStorage
@inject IMapper mapper
@inject IApiClient apiClient
@inject IInventory inventory
@inject IJSRuntime jsRuntime

<h1>Listă Produse</h1>
<RadzenButton Text="Excel" Icon="grid_on" Click="@GenerateExcel" Style="margin-bottom: 20px"/>

<RadzenDataGrid AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="5"
                IsLoading="@isLoading" Count="@count" Data="@stockView" LoadData="@LoadData"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                TItem="ProductStock"
                ColumnWidth="200px" AllowColumnResize="true">
    <Columns>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Code" Filterable="false" Title="ID" Frozen="true" Width="100px" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Name" Title="Nume Produs"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Unit" Title="Unitate Măsură" Width="50px"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.UnitPrice" Title="Preț"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Quantity" Title="Cantitate" Width="100px"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="QuantityLabel" Title="Stare" Width="100px"/>
    </Columns>
</RadzenDataGrid>

@code {
    bool isLoading;
    int count;

    IEnumerable<ProductStock>? stockView;

    public async Task GenerateExcel()
    {
        var stocks = (await apiClient.GetAllAsync().ConfigureAwait(true)).ToArray();

        var sb = new StringBuilder();

        sb.AppendLine("Code,Name,Unit,\"Unit Price\",Quantity");

        foreach (var pStock in stocks)
        {
            sb.Append(("'" + pStock.ProductCode).InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.Name.InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.Unit.InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.UnitPrice);
            sb.Append(",");
            sb.Append(pStock.Quantity);
            sb.AppendLine();
        }

        await using var ms = new MemoryStream();
        await ms.WriteAsync(Encoding.UTF8.GetBytes(sb.ToString())).ConfigureAwait(true);
        var bytes = ms.ToArray();

        await jsRuntime.SaveAs("Excel-Products.csv", bytes).ConfigureAwait(true);
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var data = (await apiClient.GetAllAsync().ConfigureAwait(true)).ToArray();
        stockView = data;
        count = data.Length;
        isLoading = false;
    }

}