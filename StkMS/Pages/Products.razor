@page "/products"

@using StkMS.Library.Services
@using Blazored.LocalStorage
@using StkMS.Contracts
@using StkMS.Library.Contracts
@using StkMS.Library.Models
@using DialogService = Radzen.DialogService
@using System.Text
@using System.IO
@using System.Net.Http.Json
@using System.Collections
@using System.Runtime.CompilerServices

@*@attribute [Authorize]*@

@inject HttpClient httpClient

@inject ILocalStorageService localStorage
@inject IMapper mapper
@inject IApiClient apiClient
@inject IJSRuntime jsRuntime
@inject DialogService dialogService

<h1>Listă Produse</h1>
<RadzenButton Icon="grid_on" Style="margin-bottom: 10px" Text="Export în excel" Click="@GenerateExcel" Size="ButtonSize.Medium" />
<RadzenButton Icon="add_circle_outline" Text="Adaugă" Click="@(() => AddOrUpdateAsync(new ProductStock { Product = new Product() }))" Style="margin-bottom: 10px" />
<RadzenButton Text="Resetare" Click="@Reset" Style="margin-bottom: 10px;" />
<br />
<RadzenAutoComplete Placeholder="Caută..." Style="display: block; margin-bottom: 10px; width: 90%" Data=@stockView TextProperty="Product.Code" Change=@(args => OnSearch(args)) />

<RadzenDataGrid @ref="grid" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="5"
                IsLoading="@isLoading" Count="@count" Data="@stockView" LoadData="@LoadDataAsync"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                TItem="ProductStock"
                ColumnWidth="200px" AllowColumnResize="true">
    <Columns>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Code" Filterable="false" Title="Cod Produs" Frozen="true" Width="100px" TextAlign="TextAlign.Center">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Name" Title="Nume Produs" Width="250px">
            <FooterTemplate>
                Total Produse: <b>@stockView?.Count()</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Unit" Title="UM" Width="60px" />
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.UnitPrice" Title="Preț" Width="60px" />
        <RadzenDataGridColumn TItem="ProductStock" Property="Quantity" Title="Cantitate" Width="90px" />
        <RadzenDataGridColumn TItem="ProductStock" Property="QuantityLabel" Title="Stare" Width="100px" />
        <RadzenDataGridColumn TItem="ProductStock" Property="Actions" Title="Acțiuni" Width="80px">
            <Template Context="productStock">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="edit" Size="ButtonSize.Small" Click="@(() => AddOrUpdateAsync(productStock))" />
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="close" Size="ButtonSize.Small" Click="@(() => DeleteAsync(productStock.Product))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    bool isLoading;
    int count;
    IEnumerable<ProductStock>? stockView;
    RadzenDataGrid<ProductStock> grid;
    public async Task OnSearch(object value)
    {
        var singleProduct = await apiClient.FindStockAsync(value.ToString()).ConfigureAwait(true);

        if (singleProduct == null)
        {
            await LoadDataAsync(new LoadDataArgs()).ConfigureAwait(true);
        }
        else
        {
            var list = new List<ProductStock?> { singleProduct };
            isLoading = true;
            stockView = list.ToArray();
            isLoading = false;
        }
    }

    async Task Reset()
    {
        grid.Reset(true);
        await grid.FirstPage(true);
    }

    public async Task GenerateExcel()
    {
        var stocks = (await apiClient.GetAllAsync().ConfigureAwait(true)).ToArray();

        var sb = new StringBuilder();

        sb.AppendLine("Cod,Nume,UM,\"Preț\",Cantitate");

        foreach (var pStock in stocks)
        {
            sb.Append(("'" + pStock.ProductCode).InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.Name.InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.Unit.InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.UnitPrice);
            sb.Append(",");
            sb.Append(pStock.Quantity);
            sb.AppendLine();
        }

        await using var ms = new MemoryStream();
        await ms.WriteAsync(Encoding.UTF8.GetBytes(sb.ToString())).ConfigureAwait(true);
        var bytes = ms.ToArray();

        await jsRuntime.SaveAs("Excel-Products.csv", bytes).ConfigureAwait(true);
    }

    void Value()
    {

    }

    public async Task DeleteAsync(Product product)
    {
        var confirm = await dialogService
        .Confirm("Ești sigur că vrei să ștergi " + product.Name + "?", "Șterge", new ConfirmOptions { OkButtonText = "Da", CancelButtonText = "Nu" })
        .ConfigureAwait(true);

        if (!confirm.GetValueOrDefault())
            return;

        await apiClient.DeleteProductAsync(product.Code).ConfigureAwait(true);
        await LoadDataAsync(new LoadDataArgs()).ConfigureAwait(true);
    }

    public async Task AddOrUpdateAsync(ProductStock stock)
    {
        var newStock = new ProductStock
        {
            Product = new Product
            {
                Code = stock.Product.Code,
                Name = stock.Product.Name,
                Unit = stock.Product.Unit,
                UnitPrice = stock.Product.UnitPrice,
            },
            Quantity = stock.Quantity,
        };

        var result = await dialogService.OpenAsync("Adaugă sau actualizează produs", ds =>
    @<div class="row">
        <div class="col-md-12">
            <div class="form-group row">
                <div class="col-4 col-form-label">
                    <RadzenLabel Text="Cod Produs" />
                </div>
                <RadzenTextBox @bind-value="newStock.Product.Code" ReadOnly="@(newStock.Product.Code != "")" />
            </div>
            <div class="form-group row">
                <div class="col-4 col-form-label">
                    <RadzenLabel Text="Nume Produs" />
                </div>
                <RadzenTextBox @bind-value="newStock.Product.Name" />
            </div>
            <div class="form-group row">
                <div class="col-4 col-form-label">
                    <RadzenLabel Text="Unitate de Masura" />
                </div>

                <RadzenTextBox @bind-value="newStock.Product.Unit" />
            </div>
            <div class="form-group row">
                <div class="col-4 col-form-label">
                    <RadzenLabel Text="Pret" />
                </div>
                <RadzenNumeric TValue="decimal" @bind-value="newStock.Product.UnitPrice" />
            </div>
            <div class="form-group row">
                <div class="col-4 col-form-label">
                    <RadzenLabel Text="Cantitate" />
                </div>

                <RadzenNumeric TValue="decimal" @bind-value="newStock.Quantity" />
            </div>

            <div>
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </div>, new Radzen.DialogOptions() { Style = "min-height:auto;min-width:auto;width:400px" });

  // result is an object here so I can't use !result
  if (result == false)
      return;

  await apiClient.AddOrUpdateAsync(newStock).ConfigureAwait(true);
  await LoadDataAsync(new LoadDataArgs()).ConfigureAwait(true);
}

public async Task LoadDataAsync(LoadDataArgs args)
{
  isLoading = true;
  var data = (await apiClient.GetAllAsync().ConfigureAwait(true)).ToArray();

  stockView = data;
  count = data.Length;
  isLoading = false;
}
}
