@page "/products"

@using StkMS.Library.Services
@using Blazored.LocalStorage
@using StkMS.Contracts
@using StkMS.Library.Contracts
@using StkMS.Library.Models
@using DialogService = Radzen.DialogService
@using System.Text
@using System.IO

@inject ILocalStorageService localStorage
@inject IMapper mapper
@inject IApiClient apiClient
@inject IJSRuntime jsRuntime
@inject DialogService dialogService

<h1>Listă Produse</h1>
<RadzenButton Icon="grid_on" style="margin-bottom: 10px" Text="Export în excel" Click="@GenerateExcel" Size="ButtonSize.Medium"/>
<RadzenButton Icon="add_circle_outline" Text="Adaugă" Click="@(() => AddOrUpdateAsync(new ProductStock { Product = new Product() }))" style="margin-bottom: 10px"/>
<RadzenTextBox Placeholder="Caută ..." style="display: block; margin-bottom: 10px; width: 100%" Name="Textbox0" @oninput="@Value"/>

<RadzenDataGrid AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="5"
                IsLoading="@isLoading" Count="@count" Data="@stockView" LoadData="@LoadDataAsync"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                TItem="ProductStock"
                ColumnWidth="200px" AllowColumnResize="true">
    <Columns>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Code" Filterable="false" Title="Cod Produs" Frozen="true" Width="100px" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Name" Title="Nume Produs"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.Unit" Title="UM" Width="50px"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Product.UnitPrice" Title="Preț" Width="50px"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Quantity" Title="Cantitate" Width="100px"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="QuantityLabel" Title="Stare" Width="100px"/>
        <RadzenDataGridColumn TItem="ProductStock" Property="Actions" Title="Acțiuni" Width="100px">
            <Template Context="productStock">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="edit" Size="ButtonSize.Small" Click="@(() => AddOrUpdateAsync(productStock))"/>
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="close" Size="ButtonSize.Small" Click="@(() => DeleteAsync(productStock.Product))"/>
            </Template>
        </RadzenDataGridColumn>


    </Columns>
</RadzenDataGrid>

@code {
    bool isLoading;
    int count;

    IEnumerable<ProductStock>? stockView;

    public async Task GenerateExcel()
    {
        var stocks = (await apiClient.GetAllAsync().ConfigureAwait(true)).ToArray();

        var sb = new StringBuilder();

        sb.AppendLine("Code,Name,Unit,\"Unit Price\",Quantity");

        foreach (var pStock in stocks)
        {
            sb.Append(("'" + pStock.ProductCode).InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.Name.InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.Unit.InQuotes());
            sb.Append(",");
            sb.Append(pStock.Product.UnitPrice);
            sb.Append(",");
            sb.Append(pStock.Quantity);
            sb.AppendLine();
        }

        await using var ms = new MemoryStream();
        await ms.WriteAsync(Encoding.UTF8.GetBytes(sb.ToString())).ConfigureAwait(true);
        var bytes = ms.ToArray();

        await jsRuntime.SaveAs("Excel-Products.csv", bytes).ConfigureAwait(true);
    }

    public async Task Value()
    {
    //
    }

    public async Task DeleteAsync(Product product)
    {
        var confirm = await dialogService
            .Confirm("Are you sure you want to delete " + product.Name + "?", "Delete", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" })
            .ConfigureAwait(true);

        if (!confirm.GetValueOrDefault())
            return;

        await apiClient.DeleteProductAsync(product.Code).ConfigureAwait(true);
        await LoadDataAsync(new LoadDataArgs()).ConfigureAwait(true);
    }

    public async Task AddOrUpdateAsync(ProductStock stock)
    {
        var newStock = new ProductStock
        {
            Product = new Product
            {
                Code = stock.Product.Code,
                Name = stock.Product.Name,
                Unit = stock.Product.Unit,
                UnitPrice = stock.Product.UnitPrice,
            },
            Quantity = stock.Quantity,
        };

        var result = await dialogService.OpenAsync("Add or Update product", ds =>
            @<div>
                 <div class="row">
                     <div class="form-group">
                         <RadzenLabel Text="Product Code"></RadzenLabel>
                         <RadzenTextBox @bind-value="newStock.Product.Code" ReadOnly="@(newStock.Product.Code != "")"></RadzenTextBox>
                     </div>
                     <div class="form-group">
                         <RadzenLabel Text="Product Name"></RadzenLabel>
                         <RadzenTextBox @bind-value="newStock.Product.Name"></RadzenTextBox>
                     </div>
                     <div class="form-group">
                         <RadzenLabel Text="Unit"></RadzenLabel>
                         <RadzenTextBox @bind-value="newStock.Product.Unit"></RadzenTextBox>
                     </div>
                     <div class="form-group">
                         <RadzenLabel Text="Unit Price"></RadzenLabel>
                         <RadzenNumeric TValue="decimal" @bind-value="newStock.Product.UnitPrice"></RadzenNumeric>
                     </div>
                     <div class="form-group">
                         <RadzenLabel Text="Quantity"></RadzenLabel>
                         <RadzenNumeric TValue="decimal" @bind-value="newStock.Quantity"></RadzenNumeric>
                     </div>

                     <div class="col-md-12">
                         <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
                         <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
                     </div>
                 </div>
            </div>);

        // result is an object here so I can't use !result
        if (result == false)
            return;

        await apiClient.AddOrUpdateAsync(newStock).ConfigureAwait(true);
        await LoadDataAsync(new LoadDataArgs()).ConfigureAwait(true);
    }

    public async Task LoadDataAsync(LoadDataArgs args)
    {
        isLoading = true;
        var data = (await apiClient.GetAllAsync().ConfigureAwait(true)).ToArray();
        stockView = data;
        count = data.Length;
        isLoading = false;
    }

}