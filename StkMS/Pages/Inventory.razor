@page "/Inventory"

@using Blazored.LocalStorage
@using StkMS.Contracts
@using StkMS.ViewModels
@using BlazorBarcodeScanner.ZXing.JS
@using StkMS.Library.Contracts
@using System.Threading

@inject IJSRuntime jsRuntime

@inject ILocalStorageService localStorage
@inject IMapper mapper
@inject IApiClient apiClient
@inject IReportGenerator reportGenerator

@inject NotificationService notificationService

<h1>Începe inventarul!</h1>

<p>Stare inventar: @(inventoryInProgress ? "" : "Nu este ") În curs de efectuare.</p>

@*@if (inventory.StartedAt.HasValue)
    {
        <p>Inventarul a început la @inventory.StartedAt.Value.ToString("G")</p>
    }
    @if (inventory.CompletedAt.HasValue)
    {
        <p>Inventarul a fost finalizat la @inventory.CompletedAt.Value.ToString("G")</p>
    }*@

<!-- V2 -->

<button class="btn btn-primary" disabled="@inventoryInProgress" @onclick="BeginInventoryAsync">Începe inventarul</button>
<button class="btn btn-primary" disabled="@(!inventoryInProgress)" @onclick="CompleteInventoryAsync">Finalizează inventarul</button>

<hr />

<BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title=" "
                                             StartCameraAutomatically="true"
                                             ShowStart="false"
                                             ShowReset="false"
                                             ShowVideoDeviceList="false"
                                             VideoWidth="300"
                                             VideoHeigth="200" />

<hr />


<div class="row">
    <div class="col-xl-6">
        <div class="col-xs-6 col-sm-8 col-lg-6">
            <EditForm Model="@stockViewModel" OnValidSubmit="@AddOrUpdateProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="productCode">Cod Produs</label>
                    <InputText id="productCode" @bind-Value="stockViewModel.Code" class="form-control" @onblur="LookUpProductAsync" />
                </div>

                <div class="form-group">
                    <label for="productName">Nume Produs</label>
                    <InputText id="productName" @bind-Value="stockViewModel.Name" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="productUnit">Unitate de măsură</label>
                    <InputText id="productUnit" @bind-Value="stockViewModel.Unit" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="productUnitPrice">Preț</label>
                    <InputNumber id="productUnitPrice" @bind-Value="stockViewModel.UnitPrice" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="productQuantity">Cantitate</label>
                    <InputNumber id="productQuantity" @bind-Value="stockViewModel.Quantity" class="form-control" />
                </div>


                <div class="text-right">
                    <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Adaugă" Disabled="@(!inventoryInProgress)" Click=@(args => ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Produs adăugat/actualizat", Duration = 4000 })) />

                    @*<button type="submit" class="btn btn-primary" @onclick="@(() => ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Produs added/updated" }))">Add/Update</button>*@
                </div>
            </EditForm>
        </div>
        <hr />
    </div>
    <div class="col-xl-6">
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Istoric" Click=@(args => ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Produs /actualizat", Duration = 4000 })) />
    </div>
</div>

<hr />

<div>
    <button class="btn btn-success" type="button" @onclick="GenerateInventoryAsync">Generează Raport</button>
</div>

@code
{
    private bool inventoryInProgress;

    private StockViewModel stockViewModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);

        _ = new Timer(timer_Tick, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));

        JsInteropClass.BarcodeReceived += LocalReceivedBarcodeTextAsync;

        await ProductScannedAsync("123500234976823456").ConfigureAwait(true);
    }

    private async void timer_Tick(object? state)
    {
        await RefreshStockAsync().ConfigureAwait(false);
    }

    private async void LocalReceivedBarcodeTextAsync(BarcodeReceivedEventArgs args)
    {
        await ProductScannedAsync(args.BarcodeText).ConfigureAwait(true);
        StateHasChanged();
    }

    private async void BeginInventoryAsync()
    {
        await apiClient.BeginInventoryAsync().ConfigureAwait(true);
        inventoryInProgress = true;
        StateHasChanged();
    }

    private async void CompleteInventoryAsync()
    {
        await apiClient.CompleteInventoryAsync().ConfigureAwait(true);
        inventoryInProgress = false;
        StateHasChanged();
    }

    private async Task ProductScannedAsync(string productCode)
    {
        var product = await apiClient.FindStockAsync(productCode).ConfigureAwait(true);
        stockViewModel = product == null ? new StockViewModel { Code = productCode } : mapper.MapToStockViewModel(product);
    }

    private async Task LookUpProductAsync()
    {
        await ProductScannedAsync(stockViewModel.Code).ConfigureAwait(true);
    }

    private void AddOrUpdateProduct()
    {
        var stock = mapper.MapToDomain(stockViewModel!);
        apiClient.RegisterInventoryAsync(stock);
    }

    private async void GenerateInventoryAsync()
    {
        var inventory = await apiClient.GetMostRecentInventoryAsync().ConfigureAwait(true);
        if (inventory == null)
            return;

        var bytes = reportGenerator.GenerateInventory(inventory);
        await jsRuntime.InvokeVoidAsync("BlazorDownloadFile", "report.pdf", "application/octet-stream", bytes).ConfigureAwait(true);
    }

    private async ValueTask RefreshStockAsync()
    {
        await apiClient.GetAllAsync().ConfigureAwait(true);
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}
