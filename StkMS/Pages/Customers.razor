@page "/Customers"
@using StkMS.Library.Contracts
@using StkMS.Library.Models
@using StkMS.Services
@using DialogService = Radzen.DialogService

@*@attribute [Authorize]*@

@inject IApiClient apiClient
@inject DialogService dialogService

<RadzenContent Container="main">
    <ChildContent>
        <RadzenHeading Size="H1" Text="Listă Clienți">
        </RadzenHeading>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Adaugă" />

                <RadzenTextBox Placeholder="Caută ..." style="display: block; margin-bottom: 10px; width: 100%" Name="Textbox0" />
                <RadzenGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" IsLoading="@isLoading" Count="@count" Data="customers" LoadData="@LoadData" FilterMode="FilterMode.Advanced" TItem="Customer">
                    <Columns>
                        <RadzenGridColumn TItem="Customer" Property="CustomerId" Title="Id" Visible="false" />
                        <RadzenGridColumn TItem="Customer" Property="Name" Title="Nume" />
                        <RadzenGridColumn TItem="Customer" Property="CUI" Title="CUI" />
                        <RadzenGridColumn TItem="Customer" Property="Address" Title="Adresă" />
                        <RadzenGridColumn TItem="Customer" Property="City" Title="Oraș" />
                        <RadzenGridColumn TItem="Customer" Property="Phone" Title="Telefon" />
                        <RadzenGridColumn TItem="Customer" Property="Email" Title="Email" />
                    </Columns>
                </RadzenGrid>
            </div>
        </div>
    </ChildContent>
</RadzenContent>


@code { int count;
    bool isLoading;
    IEnumerable<Customer> customers;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var data = (await apiClient.GetAllCustomerAsync().ConfigureAwait(true)).ToArray();
        customers = data;
        count = data.Length;
        isLoading = false;
    } }
