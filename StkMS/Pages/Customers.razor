@page "/Customers"
@using StkMS.Library.Contracts
@using StkMS.Library.Models
@using StkMS.Services
@using DialogService = Radzen.DialogService

@*@attribute [Authorize]*@

@inject IApiClient apiClient
@inject DialogService dialogService

<RadzenContent Container="main">
    <ChildContent>
        <RadzenHeading Size="H1" Text="Listă Clienți">
        </RadzenHeading>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Icon="add_circle_outline" Text="Adaugă" Click="@(() => AddOrUpdateCustomerAsync(new Customer()))" Style="margin-bottom: 10px" />


                <RadzenTextBox Placeholder="Caută ..." style="display: block; margin-bottom: 10px; width: 100%" Name="Textbox0" />
                <RadzenGrid AllowFiltering="true" AllowPaging="true" AllowSorting="true" IsLoading="@isLoading" Count="@count" Data="customers" LoadData="@LoadDataAsync" FilterMode="FilterMode.Advanced" TItem="Customer">
                    <Columns>
                        <RadzenGridColumn TItem="Customer" Property="CustomerId" Title="Id" Visible="false" />
                        <RadzenGridColumn TItem="Customer" Property="Name" Title="Nume" />
                        <RadzenGridColumn TItem="Customer" Property="CUI" Title="CUI" />
                        <RadzenGridColumn TItem="Customer" Property="Address" Title="Adresă" />
                        <RadzenGridColumn TItem="Customer" Property="City" Title="Oraș" />
                        <RadzenGridColumn TItem="Customer" Property="Phone" Title="Telefon" />
                        <RadzenGridColumn TItem="Customer" Property="Email" Title="Email" />
                        <RadzenDataGridColumn TItem="Customer" Property="Actions" Title="Acțiuni" Width="50px">
                            <Template Context="customer">
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="edit" Size="ButtonSize.Small" Click="@(() => AddOrUpdateCustomerAsync(customer))" />
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="close" Size="ButtonSize.Small" Click="@(() => DeleteCustomerAsync(customer))" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>

                </RadzenGrid>
            </div>
        </div>
    </ChildContent>
</RadzenContent>


@code { int count;
    bool isLoading;
    IEnumerable<Customer> customers;

    public async Task AddOrUpdateCustomerAsync(Customer customer)
    {
        var newCustomer = new Customer()
        {
            CustomerId = customer.CustomerId,
            Name = customer.Name,
            Address = customer.Address,
            CUI = customer.CUI,
            Phone = customer.Phone,
            City = customer.City,
            Email = customer.Email,
        };

        var result = await dialogService.OpenAsync("Adaugă sau actualizează produs", ds =>
@<div class="row">
    <div class="col-md-12">
        <div class="form-group row">
            <div class="col-4 col-form-label">
                <RadzenLabel Text="CUI" />
            </div>
            <RadzenTextBox @bind-value="newCustomer.CUI" ReadOnly="@(newCustomer.CUI != "")" />
        </div>
        <div class="form-group row">
            <div class="col-4 col-form-label">
                <RadzenLabel Text="Nume client" />
            </div>
            <RadzenTextBox @bind-value="newCustomer.Name" />
        </div>
        <div class="form-group row">
            <div class="col-4 col-form-label">
                <RadzenLabel Text="Adresa" />
            </div>

            <RadzenTextBox @bind-value="newCustomer.Address" />
        </div>
        <div class="form-group row">
            <div class="col-4 col-form-label">
                <RadzenLabel Text="Oras" />
            </div>
            <RadzenNumeric TValue="decimal" @bind-value="newCustomer.City" />
        </div>
        <div class="form-group row">
            <div class="col-4 col-form-label">
                <RadzenLabel Text="Telefon" />
            </div>

            <RadzenNumeric TValue="decimal" @bind-value="newCustomer.Phone" />
        </div>
        <div class="form-group row">
            <div class="col-4 col-form-label">
                <RadzenLabel Text="Email" />
            </div>

            <RadzenNumeric TValue="decimal" @bind-value="newCustomer.Email" />
        </div>
        <div>
            <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
        </div>
    </div>
</div>, new Radzen.DialogOptions() { Style = "min-height:auto;min-width:auto;width:400px" });

      // result is an object here so I can't use !result
      if (result == false)
          return;

      await apiClient.AddOrUpdateCustomerAsync(newCustomer).ConfigureAwait(true);
      await LoadDataAsync(new LoadDataArgs()).ConfigureAwait(true);
  }

  public async Task DeleteCustomerAsync(Customer customer)
  {
      var confirm = await dialogService
      .Confirm("Ești sigur că vrei să ștergi " + customer.Name + "?", "Șterge", new ConfirmOptions { OkButtonText = "Da", CancelButtonText = "Nu" })
      .ConfigureAwait(true);

      if (!confirm.GetValueOrDefault())
          return;

      await apiClient.DeleteCustomerAsync(customer.CUI).ConfigureAwait(true);
      await LoadDataAsync(new LoadDataArgs()).ConfigureAwait(true);
  }

  async Task LoadDataAsync(LoadDataArgs args)
  {
      isLoading = true;
      var data = (await apiClient.GetAllCustomerAsync().ConfigureAwait(true)).ToArray();
      customers = data;
      count = data.Length;
      isLoading = false;
  }


}
