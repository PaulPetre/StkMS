@page "/Sales"
@using StkMS.Library.Contracts
@using StkMS.Library.Models
@using StkMS.ViewModels
@using StkMS.Contracts
@using BlazorBarcodeScanner.ZXing.JS
@using ButtonType = MudBlazor.ButtonType

@inject IApiClient apiClient
@inject IMapper mapper
@inject IDialogService DialogService

<h3>Sales</h3>

<BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title=" "
                                             StartCameraAutomatically="true"
                                             ShowStart="false"
                                             ShowReset="false"
                                             ShowVideoDeviceList="false"
                                             VideoWidth="300"
                                             VideoHeigth="200"/>

<div class="row">
    <div class="col-xs-12 col-sm-8 col-lg-4 col-xl-2">
        <EditForm Model="@saleViewModel" OnValidSubmit="@AddSaleAsync">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="productCode">Product Code</label>
                <InputText id="productCode" @bind-Value="productCode" class="form-control" @onblur="LookUpProductAsync"/>
            </div>

            <div class="form-group">
                <label for="productName">Product Name</label>
                <InputText id="productName" @bind-Value="saleViewModel.Name" class="form-control" disabled="true"/>
            </div>

            <div class="form-group">
                <label for="productUnit">Unit</label>
                <InputText id="productUnit" @bind-Value="saleViewModel.Unit" class="form-control" disabled="true"/>
            </div>

            <div class="form-group">
                <label for="productUnitPrice">Unit Price</label>
                <InputNumber id="productUnitPrice" @bind-Value="@saleViewModel.UnitPrice" class="form-control" disabled="true"/>
            </div>

            <div class="form-group">
                <label for="productQuantity">Quantity</label>
                <InputNumber id="productQuantity" @bind-Value="saleViewModel.Quantity" class="form-control"/>
            </div>

            <div class="row">
                <div class="col">
                </div>
            </div>

            <div class="text-right">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Disabled="GetAddDisabled()">Add</MudButton>
                @*<RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Add" disabled="@GetAddDisabled()" />*@
            </div>
        </EditForm>
    </div>
</div>

<div>
    <button class="btn btn-primary" disabled="@GetCompleteDisabled()" @onclick="CompleteSaleAsync">Complete the sale</button>

</div>


@code {


    private string productCode = "";

    private SaleViewModel saleViewModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);

        JsInteropClass.BarcodeReceived += LocalReceivedBarcodeTextAsync;
    }

    private async void LocalReceivedBarcodeTextAsync(BarcodeReceivedEventArgs args)
    {
        await ProductScannedAsync(args.BarcodeText).ConfigureAwait(true);
    }

    private async Task ProductScannedAsync(string code)
    {
        productCode = code;

        var product = await apiClient.FindProductAsync(code).ConfigureAwait(true);
        saleViewModel = product == null ? SaleViewModel.CreateInvalid(code) : mapper.MapToSaleViewModel(product);

        StateHasChanged();

    // TODO: focus the quantity field
    }

    private async Task LookUpProductAsync()
    {
        await ProductScannedAsync(productCode).ConfigureAwait(true);
    }

    private bool GetAddDisabled() => productCode == "" || !saleViewModel.IsValid();

    private async Task AddSaleAsync()
    {
        await apiClient.SellProductAsync(new ProductSale(productCode, saleViewModel.Quantity)).ConfigureAwait(true);

        productCode = "";
        saleViewModel = new SaleViewModel();

        StateHasChanged();
    }

    private bool GetCompleteDisabled() => !GetAddDisabled();

    private async void CompleteSaleAsync()
    {
        await apiClient.CompleteSaleAsync().ConfigureAwait(true);

        var lastSale = await apiClient.GetLastCompleteSaleAsync().ConfigureAwait(true);
        if (lastSale == null)
            return;

        var saleDetails = mapper.MapToSaleDetailsViewModel(lastSale);
        await ShowSaleDetailsAsync(saleDetails).ConfigureAwait(true);
    }

    private async Task ShowSaleDetailsAsync(SaleDetailsViewModel saleDetails)
    {
        var parameters = new DialogParameters { ["sale"] = saleDetails };

        var dialog = DialogService.Show<SaleDialog>("List with added products", parameters);
        await dialog.Result;
    }

}